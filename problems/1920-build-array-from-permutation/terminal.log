# NEW CODE -
 1920-build-array-from-permutation  main ✘  $ go test ./...
ok  	github.com/karuppiah7890/leet-code/problems/1920-build-array-from-permutation/pkg/array	0.546s
 1920-build-array-from-permutation  main ✘  $ go help test
usage: go test [build/test flags] [packages] [build/test flags & test binary flags]

'Go test' automates testing the packages named by the import paths.
It prints a summary of the test results in the format:

	ok   archive/tar   0.011s
	FAIL archive/zip   0.022s
	ok   compress/gzip 0.033s
	...

followed by detailed output for each failed package.

'Go test' recompiles each package along with any files with names matching
the file pattern "*_test.go".
These additional files can contain test functions, benchmark functions, fuzz
tests and example functions. See 'go help testfunc' for more.
Each listed package causes the execution of a separate test binary.
Files whose names begin with "_" (including "_test.go") or "." are ignored.

Test files that declare a package with the suffix "_test" will be compiled as a
separate package, and then linked and run with the main test binary.

The go tool will ignore a directory named "testdata", making it available
to hold ancillary data needed by the tests.

As part of building a test binary, go test runs go vet on the package
and its test source files to identify significant problems. If go vet
finds any problems, go test reports those and does not run the test
binary. Only a high-confidence subset of the default go vet checks are
used. That subset is: atomic, bool, buildtags, directive, errorsas,
ifaceassert, nilfunc, printf, and stringintconv. You can see
the documentation for these and other vet tests via "go doc cmd/vet".
To disable the running of go vet, use the -vet=off flag. To run all
checks, use the -vet=all flag.

All test output and summary lines are printed to the go command's
standard output, even if the test printed them to its own standard
error. (The go command's standard error is reserved for printing
errors building the tests.)

The go command places $GOROOT/bin at the beginning of $PATH
in the test's environment, so that tests that execute
'go' commands use the same 'go' as the parent 'go test' command.

Go test runs in two different modes:

The first, called local directory mode, occurs when go test is
invoked with no package arguments (for example, 'go test' or 'go
test -v'). In this mode, go test compiles the package sources and
tests found in the current directory and then runs the resulting
test binary. In this mode, caching (discussed below) is disabled.
After the package test finishes, go test prints a summary line
showing the test status ('ok' or 'FAIL'), package name, and elapsed
time.

The second, called package list mode, occurs when go test is invoked
with explicit package arguments (for example 'go test math', 'go
test ./...', and even 'go test .'). In this mode, go test compiles
and tests each of the packages listed on the command line. If a
package test passes, go test prints only the final 'ok' summary
line. If a package test fails, go test prints the full test output.
If invoked with the -bench or -v flag, go test prints the full
output even for passing package tests, in order to display the
requested benchmark results or verbose logging. After the package
tests for all of the listed packages finish, and their output is
printed, go test prints a final 'FAIL' status if any package test
has failed.

In package list mode only, go test caches successful package test
results to avoid unnecessary repeated running of tests. When the
result of a test can be recovered from the cache, go test will
redisplay the previous output instead of running the test binary
again. When this happens, go test prints '(cached)' in place of the
elapsed time in the summary line.

The rule for a match in the cache is that the run involves the same
test binary and the flags on the command line come entirely from a
restricted set of 'cacheable' test flags, defined as -benchtime, -cpu,
-list, -parallel, -run, -short, -timeout, -failfast, and -v.
If a run of go test has any test or non-test flags outside this set,
the result is not cached. To disable test caching, use any test flag
or argument other than the cacheable flags. The idiomatic way to disable
test caching explicitly is to use -count=1. Tests that open files within
the package's source root (usually $GOPATH) or that consult environment
variables only match future runs in which the files and environment
variables are unchanged. A cached test result is treated as executing
in no time at all, so a successful package test result will be cached and
reused regardless of -timeout setting.

In addition to the build flags, the flags handled by 'go test' itself are:

	-args
	    Pass the remainder of the command line (everything after -args)
	    to the test binary, uninterpreted and unchanged.
	    Because this flag consumes the remainder of the command line,
	    the package list (if present) must appear before this flag.

	-c
	    Compile the test binary to pkg.test in the current directory but do not run it
	    (where pkg is the last element of the package's import path).
	    The file name or target directory can be changed with the -o flag.

	-exec xprog
	    Run the test binary using xprog. The behavior is the same as
	    in 'go run'. See 'go help run' for details.

	-json
	    Convert test output to JSON suitable for automated processing.
	    See 'go doc test2json' for the encoding details.

	-o file
	    Compile the test binary to the named file.
	    The test still runs (unless -c or -i is specified).
	    If file ends in a slash or names an existing directory,
	    the test is written to pkg.test in that directory.

The test binary also accepts flags that control execution of the test; these
flags are also accessible by 'go test'. See 'go help testflag' for details.

For more about build flags, see 'go help build'.
For more about specifying packages, see 'go help packages'.

See also: go build, go vet.
 1920-build-array-from-permutation  main ✘  $ go test -bench ./...
no Go files in /Users/karuppiahn/oss/github.com/karuppiah7890/leet-code/problems/1920-build-array-from-permutation
 ✘  1920-build-array-from-permutation  main ✘  $ go test -bench ./...
no Go files in /Users/karuppiahn/oss/github.com/karuppiah7890/leet-code/problems/1920-build-array-from-permutation
 ✘  1920-build-array-from-permutation  main ✘  $ go test -bench . ./...
goos: darwin
goarch: amd64
pkg: github.com/karuppiah7890/leet-code/problems/1920-build-array-from-permutation/pkg/array
cpu: Intel(R) Core(TM) i7-4770HQ CPU @ 2.20GHz
BenchmarkRandom-8   	1000000000	         0.0000002 ns/op
PASS
ok  	github.com/karuppiah7890/leet-code/problems/1920-build-array-from-permutation/pkg/array	0.508s
 1920-build-array-from-permutation  main ✘  $ go test -bench . ./...
goos: darwin
goarch: amd64
pkg: github.com/karuppiah7890/leet-code/problems/1920-build-array-from-permutation/pkg/array
cpu: Intel(R) Core(TM) i7-4770HQ CPU @ 2.20GHz
BenchmarkBuildArray-8   	19668427	        57.99 ns/op
BenchmarkRandom-8       	1000000000	         0.0000002 ns/op
PASS
ok  	github.com/karuppiah7890/leet-code/problems/1920-build-array-from-permutation/pkg/array	1.747s
 1920-build-array-from-permutation  main ✘  $ 

# OLD CODE -

 1920-build-array-from-permutation  main ✔ ⬆  $ go test -bench . -benchmem  ./...
goos: darwin
goarch: amd64
pkg: github.com/karuppiah7890/leet-code/problems/1920-build-array-from-permutation/pkg/array
cpu: Intel(R) Core(TM) i7-4770HQ CPU @ 2.20GHz
BenchmarkBuildArray-8   	15626196	        71.92 ns/op	     144 B/op	       1 allocs/op
PASS
ok  	github.com/karuppiah7890/leet-code/problems/1920-build-array-from-permutation/pkg/arra1.718s
 1920-build-array-from-permutation  main ✘ ⬆  $ go test -bench . -benchmem  ./...
goos: darwin
goarch: amd64
pkg: github.com/karuppiah7890/leet-code/problems/1920-build-array-from-permutation/pkg/array
cpu: Intel(R) Core(TM) i7-4770HQ CPU @ 2.20GHz
BenchmarkBuildArray-8   	15329233	        71.64 ns/op	     144 B/op	       1 allocs/op
PASS
ok  	github.com/karuppiah7890/leet-code/problems/1920-build-array-from-permutation/pkg/arra1.684s
 1920-build-array-from-permutation  main ✘ ⬆  $ go version
go version go1.21.4 darwin/amd64
 1920-build-array-from-permutation  main ✘ ⬆  $ 

# NEW CODE -

 1920-build-array-from-permutation  main ✘ ⬆  $ go test -bench . -benchmem  ./...
goos: darwin
goarch: amd64
pkg: github.com/karuppiah7890/leet-code/problems/1920-build-array-from-permutation/pkg/array
cpu: Intel(R) Core(TM) i7-4770HQ CPU @ 2.20GHz
BenchmarkBuildArray-8   	19962012	        58.38 ns/op	       0 B/op	       0 allocs/op
PASS
ok  	github.com/karuppiah7890/leet-code/problems/1920-build-array-from-permutation/pkg/arra1.752s
 1920-build-array-from-permutation  main ✘ ⬆  $ 
 1920-build-array-from-permutation  main ✔ ⬆  $ go test -bench . -benchmem  ./...
goos: darwin
goarch: amd64
pkg: github.com/karuppiah7890/leet-code/problems/1920-build-array-from-permutation/pkg/array
cpu: Intel(R) Core(TM) i7-4770HQ CPU @ 2.20GHz
BenchmarkBuildArray-8   	20084144	        58.08 ns/op	       0 B/op	       0 allocs/op
PASS
ok  	github.com/karuppiah7890/leet-code/problems/1920-build-array-from-permutation/pkg/arra1.740s
 1920-build-array-from-permutation  main ✘ ⬆  $ go test -bench . -benchmem  ./...
goos: darwin
goarch: amd64
pkg: github.com/karuppiah7890/leet-code/problems/1920-build-array-from-permutation/pkg/array
cpu: Intel(R) Core(TM) i7-4770HQ CPU @ 2.20GHz
BenchmarkBuildArray-8   	20644782	        58.26 ns/op	       0 B/op	       0 allocs/op
PASS
ok  	github.com/karuppiah7890/leet-code/problems/1920-build-array-from-permutation/pkg/arra1.789s
 1920-build-array-from-permutation  main ✘ ⬆  $ go test -bench . -benchmem  ./...
goos: darwin
goarch: amd64
pkg: github.com/karuppiah7890/leet-code/problems/1920-build-array-from-permutation/pkg/array
cpu: Intel(R) Core(TM) i7-4770HQ CPU @ 2.20GHz
BenchmarkBuildArray-8   	20867908	        57.40 ns/op	       0 B/op	       0 allocs/op
PASS
ok  	github.com/karuppiah7890/leet-code/problems/1920-build-array-from-permutation/pkg/arra1.779s
 1920-build-array-from-permutation  main ✔ ⬆  $ gst
On branch main
Your branch is ahead of 'origin/main' by 2 commits.
  (use "git push" to publish your local commits)

nothing to commit, working tree clean
 1920-build-array-from-permutation  main ✔ ⬆  $ 
 1920-build-array-from-permutation  main ✘ ⬆  $ gvm
go version go1.24.3 darwin/amd64
 1920-build-array-from-permutation  main ✘ ⬆  $ gvm install 1.23

      selected: 1.23

  ERROR: invalid version 1.23

 ✘  1920-build-array-from-permutation  main ✘ ⬆  $ gvm install 1.23.0

      selected: 1.23.0
      location: /Users/karuppiahn/.go/.versions/1.23.0
   downloading: https://dl.google.com/go/go1.23.0.darwin-amd64.tar.gz
    downloaded: 1.23.0
     installed: go version go1.23.0 darwin/amd64
 1920-build-array-from-permutation  main ✘ ⬆  $ go version
go version go1.23.0 darwin/amd64
 1920-build-array-from-permutation  main ✘ ⬆  $ go test -bench . -benchmem  ./...
goos: darwin
goarch: amd64
pkg: github.com/karuppiah7890/leet-code/problems/1920-build-array-from-permutation/pkg/array
cpu: Intel(R) Core(TM) i7-4770HQ CPU @ 2.20GHz
BenchmarkBuildArray-8   	19612876	        58.00 ns/op	       0 B/op	       0 allocs/op
PASS
ok  	github.com/karuppiah7890/leet-code/problems/1920-build-array-from-permutation/pkg/arra1.781s
 1920-build-array-from-permutation  main ✘ ⬆  $ 

 1920-build-array-from-permutation  main ✘ ⬆  $ go version
go version go1.24.3 darwin/amd64
 1920-build-array-from-permutation  main ✘ ⬆  $ go test -bench . -benchmem  ./...
goos: darwin
goarch: amd64
pkg: github.com/karuppiah7890/leet-code/problems/1920-build-array-from-permutation/pkg/array
cpu: Intel(R) Core(TM) i7-4770HQ CPU @ 2.20GHz
BenchmarkBuildArray-8   	20550314	        57.53 ns/op	       0 B/op	       0 allocs/op
PASS
ok  	github.com/karuppiah7890/leet-code/problems/1920-build-array-from-permutation/pkg/arra1.816s
 1920-build-array-from-permutation  main ✘ ⬆  $ 
 1920-build-array-from-permutation  main ✔ ⬆  $ go test -v ./...
=== RUN   TestBuildArray
=== RUN   TestBuildArray/TestBuildArray-0
=== RUN   TestBuildArray/TestBuildArray-1
=== RUN   TestBuildArray/TestBuildArray-2
    array_test.go:38: error in test case index: 2. Input (Before Processing): [0 2 1 5 3 4]. Output: [0 -2 2 -5 5 3]. Expected Output: [0 1 2 4 5 3]
=== RUN   TestBuildArray/TestBuildArray-3
    array_test.go:38: error in test case index: 3. Input (Before Processing): [0 11 9 4 7 10 5 8 6 3 2 1]. Output: [0 -2 -4 7 8 2 10 6 5 4 9 11]. Expected Output: [0 1 3 7 8 2 10 6 5 4 9 11]
=== RUN   TestBuildArray/TestBuildArray-4
    array_test.go:38: error in test case index: 4. Input (Before Processing): [0 11 9 4 7 10 5 8 6 3 1 2]. Output: [0 -3 3 7 8 1 10 6 5 4 11 9]. Expected Output: [0 2 3 7 8 1 10 6 5 4 11 9]
=== RUN   TestBuildArray/TestBuildArray-5
    array_test.go:38: error in test case index: 5. Input (Before Processing): [0 11 9 4 7 10 5 8 6 3 2 17 12 13 14 15 1 16]. Output: [0 -18 -4 7 8 2 10 6 5 4 9 16 12 13 14 15 11 1]. Expected Output: [0 17 3 7 8 2 10 6 5 4 9 16 12 13 14 15 11 1]
=== RUN   TestBuildArray/TestBuildArray-6
    array_test.go:38: error in test case index: 6. Input (Before Processing): [10 0 9 1 7 11 5 8 6 3 4 2]. Output: [-5 10 3 0 8 2 11 6 5 1 7 9]. Expected Output: [4 10 3 0 8 2 11 6 5 1 7 9]
=== RUN   TestBuildArray/TestBuildArray-7
    array_test.go:38: error in test case index: 7. Input (Before Processing): [6 11 9 4 7 10 5 8 0 3 2 17 12 13 14 15 1 16]. Output: [-6 -18 3 7 8 2 10 0 6 4 9 16 12 13 14 15 11 1]. Expected Output: [5 17 3 7 8 2 10 0 6 4 9 16 12 13 14 15 11 1]
=== RUN   TestBuildArray/TestBuildArray-8
    array_test.go:38: error in test case index: 8. Input (Before Processing): [6 11 9 4 7 10 0 8 5 3 2 17 12 13 14 15 1 16]. Output: [-1 -18 -4 7 8 2 6 5 10 4 9 16 12 13 14 15 11 1]. Expected Output: [0 17 3 7 8 2 6 5 10 4 9 16 12 13 14 15 11 1]
--- FAIL: TestBuildArray (0.00s)
    --- PASS: TestBuildArray/TestBuildArray-0 (0.00s)
    --- PASS: TestBuildArray/TestBuildArray-1 (0.00s)
    --- FAIL: TestBuildArray/TestBuildArray-2 (0.00s)
    --- FAIL: TestBuildArray/TestBuildArray-3 (0.00s)
    --- FAIL: TestBuildArray/TestBuildArray-4 (0.00s)
    --- FAIL: TestBuildArray/TestBuildArray-5 (0.00s)
    --- FAIL: TestBuildArray/TestBuildArray-6 (0.00s)
    --- FAIL: TestBuildArray/TestBuildArray-7 (0.00s)
    --- FAIL: TestBuildArray/TestBuildArray-8 (0.00s)
FAIL
FAIL	github.com/karuppiah7890/leet-code/problems/1920-build-array-from-permutation/pkg/arra0.541s
FAIL
 ✘  1920-build-array-from-permutation  main ✘ ⬆  $ 
 1920-build-array-from-permutation  main ✘ ⬆  $ go test -v ./...
=== RUN   TestBuildArray
=== RUN   TestBuildArray/TestBuildArray-0
=== RUN   TestBuildArray/TestBuildArray-1
=== RUN   TestBuildArray/TestBuildArray-2
=== RUN   TestBuildArray/TestBuildArray-3
=== RUN   TestBuildArray/TestBuildArray-4
=== RUN   TestBuildArray/TestBuildArray-5
=== RUN   TestBuildArray/TestBuildArray-6
=== RUN   TestBuildArray/TestBuildArray-7
=== RUN   TestBuildArray/TestBuildArray-8
--- PASS: TestBuildArray (0.00s)
    --- PASS: TestBuildArray/TestBuildArray-0 (0.00s)
    --- PASS: TestBuildArray/TestBuildArray-1 (0.00s)
    --- PASS: TestBuildArray/TestBuildArray-2 (0.00s)
    --- PASS: TestBuildArray/TestBuildArray-3 (0.00s)
    --- PASS: TestBuildArray/TestBuildArray-4 (0.00s)
    --- PASS: TestBuildArray/TestBuildArray-5 (0.00s)
    --- PASS: TestBuildArray/TestBuildArray-6 (0.00s)
    --- PASS: TestBuildArray/TestBuildArray-7 (0.00s)
    --- PASS: TestBuildArray/TestBuildArray-8 (0.00s)
PASS
ok  	github.com/karuppiah7890/leet-code/problems/1920-build-array-from-permutation/pkg/arra0.576s
 1920-build-array-from-permutation  main ✘ ⬆  $ 
 1920-build-array-from-permutation  main ✘ ⬆  $ go test -bench . -benchmem  ./...
goos: darwin
goarch: amd64
pkg: github.com/karuppiah7890/leet-code/problems/1920-build-array-from-permutation/pkg/array
cpu: Intel(R) Core(TM) i7-4770HQ CPU @ 2.20GHz
BenchmarkBuildArray-8   	23817644	        49.94 ns/op	       0 B/op	       0 allocs/op
PASS
ok  	github.com/karuppiah7890/leet-code/problems/1920-build-array-from-permutation/pkg/arra1.783s
 1920-build-array-from-permutation  main ✘ ⬆  $ 
